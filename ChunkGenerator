-- Created for infinite-rendering on the client

-- Make sure that you understand the code before changing : - )

workspace.SEED.Value = math.random(1000000) 

local floor = math.floor
local abs = math.abs
local insert = table.insert

local Chunk = require(game.ReplicatedStorage.Chunk)

local WIDTH_SCALE = Chunk.WIDTH_SCALE
local X, Z = Chunk.X, Chunk.Z
local CHUNKS_LOADED_PER_TICK = 5
local TICKS_PER_UPDATE_CYCLE = 30
local RENDER_DISTANCE = 15
local CAMERA = workspace.CurrentCamera

local cameraChunkPosX
local cameraChunkPosZ
local loadedChunkPosX
local loadedChunkPosZ
local fastLoad
local chunkCount = 0
local updateCount = 0
local chunks = {}

local function getChunkPosFromCamera()
	local camPos = CAMERA.CFrame.Position
	local camX = camPos.X
	local camZ = camPos.Z

	return floor((camX - WIDTH_SCALE) / ((X-1) * WIDTH_SCALE)),floor((camZ - WIDTH_SCALE) / ((Z-1) * WIDTH_SCALE))
end

local function isCamChunkPosOutOfLoadedChunkRange()
	if (loadedChunkPosX == nil or loadedChunkPosZ == nil)
		or (abs(cameraChunkPosX - loadedChunkPosX) >= RENDER_DISTANCE)
		or (abs(cameraChunkPosZ - loadedChunkPosZ) >= RENDER_DISTANCE) then
		return true
	else
		return false
	end
end

local function renderChunks()
	for x = cameraChunkPosX - RENDER_DISTANCE, cameraChunkPosX + RENDER_DISTANCE do
		for z = cameraChunkPosZ - RENDER_DISTANCE, cameraChunkPosZ + RENDER_DISTANCE do
			local chunkExists = false

			for index, chunk in ipairs(chunks) do
				if chunk.x == x and chunk.z == z then
					chunkExists = true
					break
				end
			end

			if not chunkExists then
				chunkCount = (chunkCount + 1) % CHUNKS_LOADED_PER_TICK
				if (chunkCount == 0) and (not fastLoad) then
					task.wait()
				end

				insert(chunks, Chunk.new(x, z))
			end
		end
	end
end

local function updateTerrain()
	renderChunks()

	loadedChunkPosX = cameraChunkPosX
	loadedChunkPosZ = cameraChunkPosZ
end

repeat
	cameraChunkPosX, cameraChunkPosZ = getChunkPosFromCamera()

	if isCamChunkPosOutOfLoadedChunkRange() then
		fastLoad = true
	else
		fastLoad = false
	end

	if (updateCount == 0) or (fastLoad) then
		updateTerrain()
	end

	updateCount = (updateCount + 1) % TICKS_PER_UPDATE_CYCLE
until not task.wait()
