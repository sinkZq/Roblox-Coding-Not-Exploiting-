local recieveRemote = game.ReplicatedStorage["Client To Server"].RemoteEvent

local Players = game:GetService("Players")

local playerRemoteCount = {}
local playerHunger = {}
local playerWater = {}
local playerHealth = {}

local countHunger
local countWater
local countHealth 

local BanStore = game:GetService("DataStoreService"):GetDataStore("Bans")


local function OnPlayerAdded(player: Instance?)
	
	local banned

	local success,errormessage = pcall(function()
		banned = BanStore:GetAsync(player.UserId)
	end)

	if banned then
		player:Kick("You are PERM BANNED!")   
	end

	player.CharacterAdded:Connect(function(character)

        -- > Set all individual *survival* Variables and Keepers 
        
		playerRemoteCount[player] = 0	
		playerHunger[player] = 500
		playerWater[player] = 250


		local humanoid = character.Humanoid or character:WaitForChild("Humanoid")


		local folder = Instance.new("Folder")
		folder.Parent = player
		folder.Name = "playerData"

		countHunger = Instance.new("NumberValue")
		countHunger.Parent = folder
		countHunger.Name = player.Name .. "_Hunger"	
		countHunger.Value = playerHunger[player]


		countWater = Instance.new("NumberValue")
		countWater.Parent = folder
		countWater.Name = player.Name .. "_Water"	
		countWater.Value = playerWater[player]


		--[[countHealth = Instance.new("NumberValue")
		countHealth.Parent = folder
		countHealth.Name = player.Name .. "_Health"
		countHealth.Value = playerHealth[player]]

		coroutine.wrap(function() -- > Remove Hunger each 4 - 6 seconds
			task.spawn(function()

				while task.wait(math.random(4, 6)) do
					countHunger.Value -= 1 

					if countHunger and countHunger.Parent then

						if countHunger.Value == 0 or countHunger.Value < 0 then

							countHunger.Value = 0 

							humanoid.Health -= 3

							task.wait(0.1)

							if humanoid.Health == 0 or humanoid.Health < 0 then
								countHunger.Value = 500
							end
						end
					end
				end
			end)	
		end)()

		coroutine.wrap(function() -- > Remove Water each 8 - 11 seconds
			task.spawn(function()

				while task.wait(math.random(8, 11)) do
					countWater.Value -= 1 

					if countWater and countWater.Parent then

						if countWater.Value == 0 or countWater.Value < 0 then

							countWater.Value = 0

							humanoid.Health -= 1 

							if humanoid.Health == 0 or humanoid.Health < 0 then
								countWater.Value = 250
							end
						end
					end
				end
			end)
		end)()
	end)
end

recieveRemote.OnServerEvent:Connect(function(player, Argument) -- > Recieve Client requests
	
	local humanoid = player.Character.Humanoid or player.CharacterAdded:Wait():WaitForChild("Humanoid")
	
	playerRemoteCount[player] += 1
	
	if type(Argument) == "string" then
		
		if Argument == "start" then
			
			if countWater.Value > 0 and countHunger.Value > 0 then
				
				humanoid.WalkSpeed = 19
				
			else
				
				humanoid.WalkSpeed = 16
			end
		end
	end
	
	if type(Argument) == "string" and Argument == "end" then	
		humanoid.WalkSpeed = 16
	end
	
	if type(Argument) == "string" and Argument == "start" then
		
		if playerRemoteCount[player] % 2 == 0 then
			
			local success,errormessage = pcall(function()
				BanStore:SetAsync(player.UserId,true)
			end)			
			
			player:Kick("Attempted to change remote-args!")

		elseif type(Argument) == "string" and Argument == "end" then
			
			if playerRemoteCount[player] % 2 ~= 0 then
				
				local success,errormessage = pcall(function()
					BanStore:SetAsync(player.UserId,true)
				end)	
				
				player:Kick("Attempted to change remote-args!")
			end
		end
	end
end)

local function OnPlayerRemoving(player: Instance?) -- ` Errors : ? 
	--[[countHunger[player] = 0
	countWater[player] = 0
	playerRemoteCount[player] = 0]]
end

Players.PlayerAdded:Connect(OnPlayerAdded) -- > Connect
Players.PlayerRemoving:Connect(OnPlayerRemoving) -- > Connect
